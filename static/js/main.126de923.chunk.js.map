{"version":3,"sources":["images/icon-dark.svg","sections/Login/LoginHeader.tsx","components/Button/index.tsx","sections/Login/index.tsx","sections/Profile/ProfileImage.tsx","sections/Profile/PhoneModal.tsx","components/Link/index.tsx","sections/Profile/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","LoginImage","styled","Image","LoginTitle","div","LoginHeader","Row","noGutters","Col","xs","src","IconDark","StyledButton","Button","CustomButton","disabled","onClick","children","LoginWrapper","IncorrectCred","Login","setLoggedIn","useState","email","setEmail","password","setPassword","visible","setVisible","incorrect","setIncorrect","Form","Group","Control","type","placeholder","value","onChange","e","currentTarget","InputGroup","Append","Text","className","StyledImage","AttendeeType","h3","ProfileImage","toUpperCase","PhoneModal","phone","hidePhone","phone_number","Modal","size","show","onHide","animation","centered","Header","closeButton","StyledLink","a","Link","href","target","ProfileWrapper","ProfileSection","Name","ID","CheckedIn","Profile","state","id","name","profile_pic","bio","checked_in","actions","num_workshops_attended","sponsor_company","sponsor_company_link","next_shift","isFetching","checkIn","setState","increaseWorkshop","showPhone","fetch","then","results","json","myJson","this","props","date","Date","actionList","check_in","attend_workshop","call_phone","toString","map","act","key","str","replace","split","i","x","length","substr","join","capitalizeAction","React","Component","GlobalStyle","createGlobalStyle","App","loggedIn","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.126de923.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon-dark.54d9348c.svg\";","import React from 'react';\r\n\r\nimport IconDark from 'images/icon-dark.svg';\r\n\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Image from 'react-bootstrap/Image';\r\n\r\nimport styled from 'styled-components';\r\n\r\nconst LoginImage = styled(Image)`\r\n  margin: 10px;\r\n  float: right;\r\n  width: 32px;\r\n`;\r\n\r\nconst LoginTitle = styled.div`\r\n  text-align: left;\r\n  font-size: 21px;\r\n  margin-top: 8px;\r\n`;\r\n\r\nconst LoginHeader = () => {\r\n  return (\r\n    <Row noGutters>\r\n      <Col xs={3}>\r\n        <LoginImage src={IconDark} />\r\n      </Col>\r\n      <Col>\r\n        <LoginTitle>\r\n          Attendee Information\r\n        </LoginTitle>\r\n      </Col>\r\n    </Row>\r\n  );\r\n}\r\n\r\nexport default LoginHeader;\r\n","import React from 'react';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nimport styled from 'styled-components';\r\n\r\nconst StyledButton = styled(Button)`\r\n  background-color: rgb(55, 63, 87);\r\n  color: rgb(239, 248, 250);\r\n  -webkit-box-align: center;\r\n  align-items: center;\r\n  width: 200px;\r\n  justify-content: space-around;\r\n  font-size: 16px;\r\n  border-radius: 50px;\r\n  padding: 15px;\r\n  border: none;\r\n  margin-right: 5px;\r\n\r\n  &:disabled {\r\n    background-color: rgb(55, 63, 87);\r\n    opacity: 0.5 !important;\r\n  }\r\n\r\n  &:hover {\r\n    background-color: rgb(55, 63, 87);\r\n    opacity: 0.8;\r\n  }\r\n`;\r\n\r\nconst CustomButton = ({ disabled, onClick, children }: { disabled?: boolean, onClick?: () => void, children: string }) => {\r\n  return <StyledButton disabled={disabled} onClick={onClick}>{children}</StyledButton>;\r\n}\r\n\r\nexport default CustomButton;\r\n","import React, { useState } from 'react';\r\n\r\nimport LoginHeader from 'sections/Login/LoginHeader';\r\nimport Button from 'components/Button';\r\n\r\nimport Form from 'react-bootstrap/Form';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\n\r\nimport styled from 'styled-components';\r\n\r\nconst LoginWrapper = styled.div`\r\n  max-width: 400px;\r\n  margin: auto;\r\n  text-align: center;\r\n  padding: 15px;\r\n  margin-top: 50px;\r\n`;\r\n\r\nconst IncorrectCred = styled.div`\r\n  color: red;\r\n`;\r\n\r\nconst Login = ({ setLoggedIn }: { setLoggedIn: React.Dispatch<React.SetStateAction<boolean>> }) => {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [visible, setVisible] = useState(false);\r\n  const [incorrect, setIncorrect] = useState(false);\r\n\r\n  const validEmail = 'email@gmail.com';\r\n  const validPassword = 'passwordHTN';\r\n\r\n  const validateLogin = () => {\r\n    setLoggedIn(true);\r\n    if (email === validEmail && password === validPassword) {\r\n      setLoggedIn(true);\r\n    } else {\r\n      setPassword('');\r\n      setIncorrect(true);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <LoginWrapper>\r\n      <LoginHeader />\r\n      <Form>\r\n        <Form.Group>\r\n          <Form.Control type=\"email\" placeholder=\"Email\" value={email} onChange={(e: React.FormEvent<HTMLInputElement>) => { setEmail(e.currentTarget.value) }} />\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <InputGroup>\r\n            <Form.Control type={visible ? 'text' : 'password'} placeholder=\"Password\" value={password} onChange={(e: React.FormEvent<HTMLInputElement>) => { setPassword(e.currentTarget.value) }} />\r\n            <InputGroup.Append>\r\n              <InputGroup.Text onClick={() => { setVisible(!visible) }}><i className={visible ? 'fa fa-eye' : 'fa fa-eye-slash'} /></InputGroup.Text>\r\n            </InputGroup.Append>\r\n          </InputGroup>\r\n        </Form.Group>\r\n        <Button onClick={validateLogin}>\r\n          Submit\r\n        </Button>\r\n        {incorrect && <IncorrectCred>Incorrect Email/Password</IncorrectCred>}\r\n      </Form>\r\n    </LoginWrapper>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import React from 'react';\r\n\r\nimport Image from 'react-bootstrap/Image';\r\n\r\nimport styled from 'styled-components';\r\n\r\nconst StyledImage = styled(Image)`\r\n  width: 300px;\r\n  border-top-right-radius: 50px;\r\n  border-bottom-left-radius: 50px;\r\n`;\r\n\r\nconst AttendeeType = styled.h3`\r\n  color: white;\r\n  width: 300px;\r\n  padding: 0px 10px;\r\n  margin-top: -42px;\r\n  line-height: 1.5;\r\n  right: calc((100% - 300px) / 2);\r\n  position: absolute;\r\n  background: linear-gradient(90deg, rgba(255,255,255,0) 33%, rgba(5,5,5,0.9) 100%);\r\n  text-align: right;\r\n`;\r\n\r\nconst ProfileImage = ({ src, type }: { src: string, type: string }) => {\r\n  return (\r\n    <>\r\n      <StyledImage src={src} />\r\n      <AttendeeType>{type.toUpperCase()}</AttendeeType>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ProfileImage;\r\n","import React from 'react';\r\n\r\nimport Modal from 'react-bootstrap/Modal';\r\n\r\ninterface PhoneModalProps {\r\n  phone: boolean;\r\n  hidePhone: () => void;\r\n  phone_number: string;\r\n}\r\n\r\nconst PhoneModal = ({ phone, hidePhone, phone_number }: PhoneModalProps) => {\r\n  return (\r\n    <Modal\r\n      size=\"sm\"\r\n      show={phone}\r\n      onHide={hidePhone}\r\n      animation\r\n      centered\r\n    >\r\n      <Modal.Header closeButton>\r\n        {'Call ' + phone_number + '?'}\r\n        <button type=\"button\" className=\"close\">\r\n          ✓\r\n        </button>\r\n      </Modal.Header>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default PhoneModal;\r\n","import React from 'react';\r\n\r\nimport styled from 'styled-components';\r\n\r\nconst StyledLink = styled.a`\r\n  color: inherit;\r\n  text-decoration: underline;\r\n  \r\n  &:hover {\r\n    color: inherit;\r\n    text-decoration: none;\r\n  }\r\n`;\r\n\r\nconst Link = ({ href, children }: { href: string, children: string }) => {\r\n  return <StyledLink href={href} target=\"_blank\">{children}</StyledLink>\r\n}\r\n\r\nexport default Link;\r\n","import React from 'react';\r\n\r\nimport ProfileImage from 'sections/Profile/ProfileImage';\r\nimport PhoneModal from 'sections/Profile/PhoneModal';\r\nimport Button from 'components/Button';\r\nimport Link from 'components/Link';\r\n\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nimport styled from 'styled-components';\r\n\r\ntype AttendeeType = 'hacker' | 'organizer' | 'volunteer' | 'sponsor';\r\n\r\ntype Action = 'check_in' | 'attend_workshop' | 'call_phone';\r\n\r\ninterface AttendeeProfile {\r\n  id: number;\r\n  name: string;\r\n  profile_pic: string; // a url to an image\r\n  bio?: string; // a paragraph describing the attendee\r\n  type: AttendeeType;\r\n  checked_in: boolean;\r\n  actions: Action[];\r\n  num_workshops_attended?: number; // all \"hacker\" type attendees (and no other types) will have this field\r\n  sponsor_company?: string; // all \"sponsor\" type attendees (and no other types) will have this field\r\n  sponsor_company_link?: string; // all \"sponsor\" type attendees (and no other types) will have this field\r\n  next_shift?: number; // datetime (ms); all \"volunteer\" type attendees (and no other types) will have this field\r\n  phone_number?: string; // all \"organizer\" type attendees (and no other types) will have this field\r\n}\r\n\r\ntype EndpointResponse = AttendeeProfile | null;\r\n\r\nconst ProfileWrapper = styled.div`\r\n  max-width: 800px;\r\n  margin: auto;\r\n  margin-top: 15px;\r\n  text-align: center;\r\n  padding: 15px;\r\n  border: 1px solid grey;\r\n  border-radius: 25px;\r\n  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\r\n  background-color: white;\r\n`;\r\n\r\nconst ProfileSection = styled.div`\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nconst Name = styled.div`\r\n  font-size: 24px;\r\n  font-weight: 600;\r\n`;\r\n\r\nconst ID = styled(ProfileSection)`\r\n  opacity: 0.75;\r\n`;\r\n\r\nconst CheckedIn = styled.div`\r\n  color: green;\r\n`;\r\n\r\n// capitalizes each word in an action\r\nconst capitalizeAction = (act: string) => {\r\n  act = act.replace('_', ' ');\r\n  let str = act.split(' ');\r\n\r\n  for (let i = 0, x = str.length; i < x; i++) {\r\n    str[i] = str[i][0].toUpperCase() + str[i].substr(1);\r\n  }\r\n\r\n  return str.join(' ');\r\n}\r\n\r\n// Profile for any given attendee (determined by type)\r\nclass Profile extends React.Component<{ setLoggedIn: React.Dispatch<React.SetStateAction<boolean>> }, {}> {\r\n  state = {\r\n    id: 0,\r\n    name: '',\r\n    profile_pic: '',\r\n    bio: '',\r\n    type: '',\r\n    checked_in: false,\r\n    actions: [],\r\n    num_workshops_attended: 0,\r\n    sponsor_company: '',\r\n    sponsor_company_link: '',\r\n    next_shift: 0,\r\n    phone_number: '',\r\n    isFetching: true,\r\n    phone: false\r\n  }\r\n\r\n  // fetch from the user API, updating state once received\r\n  componentDidMount() {\r\n    fetch('https://hackthenorth.netlify.com/api/fe-challenge-attendee').then((results: any) => {\r\n      return results.json();\r\n    }).then((myJson: EndpointResponse) => {\r\n      this.setState(myJson);\r\n      this.setState({ isFetching: false });\r\n    });\r\n  }\r\n\r\n  // checks in the attendee\r\n  checkIn = () => {\r\n    this.setState({ checked_in: true });\r\n  }\r\n\r\n  // increases the workshop count for a hacker\r\n  increaseWorkshop = () => {\r\n    this.setState({ num_workshops_attended: this.state.num_workshops_attended + 1 });\r\n  }\r\n\r\n  // shows phone modal\r\n  showPhone = () => {\r\n    this.setState({ phone: true });\r\n  }\r\n  // hide phone modal\r\n  hidePhone = () => {\r\n    this.setState({ phone: false });\r\n  }\r\n\r\n  render() {\r\n    // Currently fetching\r\n    if (this.state.isFetching) {\r\n      return <>Fetching...</>;\r\n    }\r\n    // No profile found\r\n    if (!this.state.type) {\r\n      return (\r\n        <>\r\n          <Button onClick={() => { this.props.setLoggedIn(false) }}>Logout</Button>\r\n          <div>ERROR: no profile found. Please try again</div>\r\n        </>\r\n      );\r\n    }\r\n\r\n    const { id, name, profile_pic, bio, type, checked_in, actions, num_workshops_attended, sponsor_company, sponsor_company_link, next_shift, phone_number } = this.state;\r\n    const date = new Date(next_shift); // converts date in ms to readable date\r\n    // corresponds each Action type with it's corresponding method\r\n    const actionList: any = {\r\n      check_in: this.checkIn,\r\n      attend_workshop: this.increaseWorkshop,\r\n      call_phone: this.showPhone\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <Button onClick={() => { this.props.setLoggedIn(false) }}>Logout</Button>\r\n        <ProfileWrapper>\r\n          <ProfileImage src={profile_pic} type={type} />\r\n          <Name>{name}</Name>\r\n          <ID>{'ID: ' + id}</ID>\r\n          {type === 'hacker' && (\r\n            <ProfileSection>\r\n              {bio}\r\n            </ProfileSection>\r\n          )}\r\n          {type === 'sponsor' && (\r\n            <ProfileSection>\r\n              <Link href={sponsor_company_link}>{sponsor_company}</Link>\r\n            </ProfileSection>\r\n          )}\r\n          {type === 'volunteer' && (\r\n            <ProfileSection>\r\n              Next Shift:\r\n              <div>\r\n                {date.toString()}\r\n              </div>\r\n            </ProfileSection>\r\n          )}\r\n          <Row id=\"actions\">\r\n            {actions.map((act: string) =>\r\n              <Col key={act}>\r\n                <Button onClick={actionList[act]} disabled={act === 'check_in' && checked_in}>\r\n                  {capitalizeAction(act)}\r\n                </Button>\r\n                {act === 'check_in' && checked_in && <CheckedIn>Checked in</CheckedIn>}\r\n                {act === 'attend_workshop' && <div>Has attended: {num_workshops_attended}</div>}\r\n                {act === 'call_phone' && <PhoneModal phone={this.state.phone} hidePhone={this.hidePhone} phone_number={phone_number} />}\r\n              </Col>\r\n            )}\r\n          </Row>\r\n        </ProfileWrapper>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Profile;\r\n","import React, { useState } from 'react';\n\nimport Login from 'sections/Login';\nimport Profile from 'sections/Profile';\n\nimport { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    font-family: Inter, -apple-system, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif;\n    color: rgb(24, 50, 73);\n    background-color: rgb(242,  249, 251);\n    height: 100%;\n    padding: 25px 15px;\n  }\n`;\n\nconst App = () => {\n  const [loggedIn, setLoggedIn] = useState(false);\n\n  return (\n    <>\n      <GlobalStyle />\n      {!loggedIn ? <Login setLoggedIn={setLoggedIn} /> : <Profile setLoggedIn={setLoggedIn} />}\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from 'serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}